<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="9115984e-f870-408a-abd5-4a3fa4f649fc" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/src/test/java/pageobject/page/CaseSearch.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/pageobject/page/CaseView.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/pageobject/page/LoginPage.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test/java/pageobject/page/MainPage.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/NewWebDriver.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/NewWebDriverTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/test-classes/NewWebDriver.class" beforeDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
    <option name="SCHEME" value="Project" />
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>click</find>
      <find>enabled</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="vmOptionsForImporter" value="-Xmx768m" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1567612393963" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/src/test/pageobject/test" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.18529412" />
    <property name="settings.editor.selected.configurable" value="reference.projectsettings.compiler.javacompiler" />
  </component>
  <component name="RecentsManager">
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="D:\MyProjects\src\test\pageobject\test" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="TestNG.NewWebDriverTest">
    <configuration name="NewWebDriver" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="NewWebDriver" />
      <module name="MyProjects" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="NewWebDriverTest" type="TestNG" temporary="true" nameIsGenerated="true">
      <module name="MyProjects" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
      <option name="ALTERNATIVE_JRE_PATH" value="12" />
      <option name="SUITE_NAME" value="" />
      <option name="PACKAGE_NAME" value="" />
      <option name="MAIN_CLASS_NAME" value="NewWebDriverTest" />
      <option name="GROUP_NAME" value="" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="PARAMETERS" value="" />
      <option name="OUTPUT_DIRECTORY" value="" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="moduleWithDependencies" />
      </option>
      <option name="PROPERTIES_FILE" value="" />
      <properties />
      <listeners />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.NewWebDriver" />
      <item itemvalue="TestNG.NewWebDriverTest" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="TestNG.NewWebDriverTest" />
        <item itemvalue="Application.NewWebDriver" />
      </list>
    </recent_temporary>
  </component>
  <component name="ServiceViewManager">
    <option name="allServicesViewState">
      <serviceView>
        <treeState>
          <expand />
          <select />
        </treeState>
      </serviceView>
    </option>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="19c0b7ba-7948-4e6b-89d9-16c8e1a4f335" name="Default Changelist" comment="" />
      <created>1567411383922</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1567411383922</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI&quot;)));
//		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
		new WebDriverWait(driver,10).until(ExpectedConditions.presenceOfElementLocated(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		WebElement lee = driver.findElement(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;));
		new WebDriverWait(driver,10).until(ExpectedConditions.visibilityOf(lee));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		WebElement lee = driver.findElement(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;));
		new WebDriverWait(driver,10).until(ExpectedConditions.isInvisible(lee));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		new WebDriverWait(driver,10).until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		new WebDriverWait(driver,10).until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
  </component>
</project>