<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="19c0b7ba-7948-4e6b-89d9-16c8e1a4f335" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/NewWebDriver.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/NewWebDriver.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/test-classes/NewWebDriver.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/test-classes/NewWebDriver.class" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/target/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/test/java/NewWebDriver.java">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="254">
              <caret line="100" column="49" selection-start-line="100" selection-start-column="49" selection-end-line="100" selection-end-column="49" />
              <folding>
                <element signature="e#3396#3397#0" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="jar://$MAVEN_REPOSITORY$/org/seleniumhq/selenium/selenium-support/3.141.59/selenium-support-3.141.59.jar!/org/openqa/selenium/support/ui/ExpectedConditions.class">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="277">
              <caret line="404" column="10" lean-forward="true" selection-start-line="390" selection-start-column="15" selection-end-line="404" selection-end-column="10" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>click</find>
      <find>enabled</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/test/java/NewWebDriver.java" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="160" />
    <option name="y" value="139" />
    <option name="width" value="1686" />
    <option name="height" value="943" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="TryTest" type="b2602c69:ProjectViewProjectNode" />
              <item name="Selenium" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="TryTest" type="b2602c69:ProjectViewProjectNode" />
              <item name="Selenium" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="TryTest" type="b2602c69:ProjectViewProjectNode" />
              <item name="Selenium" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="TryTest" type="b2602c69:ProjectViewProjectNode" />
              <item name="Selenium" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="java" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="TryTest" type="b2602c69:ProjectViewProjectNode" />
              <item name="Selenium" type="462c0819:PsiDirectoryNode" />
              <item name="target" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1567612393963" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="NewWebDriver" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="NewWebDriver" />
      <module name="TryTest" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.NewWebDriver" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="19c0b7ba-7948-4e6b-89d9-16c8e1a4f335" name="Default Changelist" comment="" />
      <created>1567411383922</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1567411383922</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="160" y="139" width="1686" height="943" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.21736526" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="JRebel" order="2" side_tool="true" />
      <window_info id="Favorites" order="3" side_tool="true" />
      <window_info id="Image Layers" order="4" />
      <window_info id="Designer" order="5" />
      <window_info id="UI Designer" order="6" />
      <window_info id="Capture Tool" order="7" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info active="true" anchor="bottom" id="Run" order="2" visible="true" weight="0.25216317" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.39802226" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Version Control" order="7" />
      <window_info anchor="bottom" id="Terminal" order="8" />
      <window_info anchor="bottom" id="Event Log" order="9" side_tool="true" />
      <window_info anchor="bottom" id="JRebel Executor" order="10" />
      <window_info anchor="bottom" id="Messages" order="11" weight="0.32909605" />
      <window_info anchor="bottom" id="JRebel Console" order="12" side_tool="true" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="Capture Analysis" order="6" />
      <window_info anchor="right" id="Palette&#9;" order="7" />
    </layout>
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
//		new WebDriverWait(driver,5).until(ExpectedConditions.presenceOfElementLocated(By.className(&quot;blockUI&quot;)));
//		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
//		WebElement lee = driver.findElement();
		new WebDriverWait(driver,10).until(ExpectedConditions.presenceOfElementLocated(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		WebElement lee = driver.findElement(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;));
		new WebDriverWait(driver,10).until(ExpectedConditions.visibilityOf(lee));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		WebElement lee = driver.findElement(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;));
		new WebDriverWait(driver,10).until(ExpectedConditions.isInvisible(lee));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		new WebDriverWait(driver,10).until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//*[contains(@class, 'blockUI')]&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>WebElement caseclass = driver.findElement(By.id(&quot;select2-chosen-1&quot;));
caseclass.click();
WebElement typeAhead = driver.findElement(By.id(&quot;s2id_autogen1_search&quot;));


typeAhead.sendKeys(&quot;@@@&quot;);
// Thread.sleep(3000);
new WebDriverWait(driver,10)
		.until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;select2-searching&quot;)));

WebElement dropdown = driver.findElement(By.xpath(&quot;//*[@id=\&quot;select2-results-1\&quot;]&quot;));
List&lt;WebElement&gt; options = dropdown.findElements(By.tagName(&quot;li&quot;));
for(WebElement option : options)
{
	if(option.getText().equals(&quot;Business - N8 - Arbitration&quot;)){
		new WebDriverWait(driver,10)
				.until(ExpectedConditions.elementToBeClickable(option));
		option.click();
		new WebDriverWait(driver,10).until(ExpectedConditions.invisibilityOfElementLocated(By.className(&quot;blockUI blockOverlay&quot;)));
		break;
	}
}

WebElement saveBtn = driver.findElement(By.name(&quot;save&quot;));
new WebDriverWait(driver, 100).until(ExpectedConditions.visibilityOf(saveBtn));
saveBtn.click();</expression-string>
        <language-id>JAVA</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/org/seleniumhq/selenium/selenium-support/3.141.59/selenium-support-3.141.59.jar!/org/openqa/selenium/support/ui/ExpectedConditions.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="277">
          <caret line="404" column="10" lean-forward="true" selection-start-line="390" selection-start-column="15" selection-end-line="404" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test/java/NewWebDriver.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="254">
          <caret line="100" column="49" selection-start-line="100" selection-start-column="49" selection-end-line="100" selection-end-column="49" />
          <folding>
            <element signature="e#3396#3397#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>TryTest</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Maven: com.google.code.findbugs:jsr305:1.3.9</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>